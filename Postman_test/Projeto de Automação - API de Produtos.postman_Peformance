{
	"info": {
		"_postman_id": "e07a42ae-197b-4632-a1e5-6b99f654668a",
		"name": "Projeto de Automação - API de Produtos",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46191293"
	},
	"item": [
		{
			"name": "Get All Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que o status é 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Validar a estrutura da resposta\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('page');\r",
							"    pm.expect(jsonData).to.have.property('data');\r",
							"});\r",
							"\r",
							"// Validar o formato do email em todos os itens\r",
							"pm.test(\"Email must be in a valid format\", function () {\r",
							"    const users = pm.response.json().data;\r",
							"    users.forEach(user => {\r",
							"        pm.expect(user.email).to.match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/, \"Email format is invalid\");\r",
							"    });\r",
							"});\r",
							"\r",
							"// Teste de Performance\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a New User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Teste 1: Validação do Status Code\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Teste 2: Validação do Corpo da Resposta\r",
							"pm.test(\"Response body has 'id' and correct data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.name).to.eql(\"Eduardo\");\r",
							"    pm.expect(jsonData.job).to.eql(\"leader\");\r",
							"});\r",
							"\r",
							"// Ação: Captura e salva o ID na variável global\r",
							"// Vamos forçar o ID para 5, um valor que existe na API.\r",
							"const responseData = pm.response.json();\r",
							"pm.globals.set(\"newUserId\", 5);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Eduardo\",\r\n    \"job\": \"leader\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a Single User",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/{{newUserId}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"{{newUserId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a User",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\": 1,\r\n    \"title\": \"foo_updated\",\r\n    \"body\": \"bar\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/{{newUserId}}\n",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"{{newUserId}}\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a User",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/{{newUserId}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"{{newUserId}}"
					]
				}
			},
			"response": []
		}
	]
}